Sujet en Anglais : https://cdn.intra.42.fr/pdf/pdf/73930/en.subject.pdf
Sujet en Francais : https://cdn.intra.42.fr/pdf/pdf/73931/fr.subject.pdf

e3r11p9% cd
e3r11p9% cd c_07
e3r11p9% ls
ex00
e3r11p9% cd ex00 
e3r11p9% ls
ft_strdup.c
e3r11p9% cat ft_strdup.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 14:07:10 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 14:07:13 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

int	ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (str && str[i] != '\0')
		i++;
	return (i);
}

char	*ft_strncpy(char *dest, char *src, unsigned int n)
{
	unsigned int	i;

	if (src && dest && n > 0)
	{
		i = 0;
		while (i < n && src[i] != '\0')
		{
			dest[i] = src[i];
			i++;
		}
		while (i < n)
		{
			dest[i] = '\0';
			i++;
		}
	}
	return (dest);
}

char	*ft_strdup(char *src)
{
	int		src_len;
	char	*ptr;

	if (src)
	{
		src_len = ft_strlen(src);
		ptr = (char *) malloc(src_len * sizeof(char));
		if (ptr)
		{
			ft_strncpy(ptr, src, src_len + 1);
			return (ptr);
		}
	}
	return (NULL);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_strdup.c 
ft_strdup.c: OK!
e3r11p9% vi test_ft_strdup.c 
e3r11p9% cat test_ft_strdup.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_strdup.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 16:07:32 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 16:07:35 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

char	*ft_strdup(char *src);

int	main(void)
{
	printf("\"%s\" duplicated : \"%s\"\n", "Toto", ft_strdup("Toto"));
	retrun (0);
}
e3r11p9% vi test_ft_strdup.c 
e3r11p9% cat test_ft_strdup.c
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_strdup.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 16:07:32 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 16:08:20 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>

char	*ft_strdup(char *src);

int	main(void)
{
	printf("\"%s\" duplicated : \"%s\"\n", "Toto", ft_strdup("Toto"));
	return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_strdup.c 
test_ft_strdup.c: OK!
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_strdup ft_strdup.c test_ft_strdup.c 
ft_strdup.c: In function ‘ft_strdup’:
ft_strdup.c:52:18: error: implicit declaration of function ‘malloc’ [-Werror=implicit-function-declaration]
   52 |   ptr = (char *) malloc(src_len * sizeof(char));
      |                  ^~~~~~
ft_strdup.c:52:18: error: incompatible implicit declaration of built-in function ‘malloc’ [-Werror]
ft_strdup.c:1:1: note: include ‘<stdlib.h>’ or provide a declaration of ‘malloc’
  +++ |+#include <stdlib.h>
    1 | /* ************************************************************************** */
ft_strdup.c:59:10: error: ‘NULL’ undeclared (first use in this function)
   59 |  return (NULL);
      |          ^~~~
ft_strdup.c:1:1: note: ‘NULL’ is defined in header ‘<stddef.h>’; did you forget to ‘#include <stddef.h>’?
  +++ |+#include <stddef.h>
    1 | /* ************************************************************************** */
ft_strdup.c:59:10: note: each undeclared identifier is reported only once for each function it appears in
   59 |  return (NULL);
      |          ^~~~
ft_strdup.c:60:1: error: control reaches end of non-void function [-Werror=return-type]
   60 | }
      | ^
cc1: all warnings being treated as errors
e3r11p9% vi ft_strdup.c                                   
e3r11p9% cat ft_strdup.c                                     
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 14:07:10 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 16:11:29 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (str && str[i] != '\0')
		i++;
	return (i);
}

char	*ft_strncpy(char *dest, char *src, unsigned int n)
{
	unsigned int	i;

	if (src && dest && n > 0)
	{
		i = 0;
		while (i < n && src[i] != '\0')
		{
			dest[i] = src[i];
			i++;
		}
		while (i < n)
		{
			dest[i] = '\0';
			i++;
		}
	}
	return (dest);
}

char	*ft_strdup(char *src)
{
	int		src_len;
	char	*ptr;

	if (src)
	{
		src_len = ft_strlen(src);
		ptr = (char *) malloc(src_len * sizeof(char));
		if (ptr)
		{
			ft_strncpy(ptr, src, src_len + 1);
			return (ptr);
		}
	}
	return (NULL);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_strdup.c                    
ft_strdup.c: OK!
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_strdup ft_strdup.c test_ft_strdup.c
e3r11p9% ls -al
total 32
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 22 16:12 .
drwxr-xr-x 3 hauerbac 2023_paris  4096 Feb 22 13:57 ..
-rw-r--r-- 1 hauerbac 2023_paris  1512 Feb 22 16:11 ft_strdup.c
-rwxr-xr-x 1 hauerbac 2023_paris 16144 Feb 22 16:12 test_ft_strdup
-rw-r--r-- 1 hauerbac 2023_paris  1041 Feb 22 16:08 test_ft_strdup.c
e3r11p9% ./test_ft_strdup 
"Toto" duplicated : "Toto"
e3r11p9% vi test_ft_strdup.c                                                     
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_strdup.c               
test_ft_strdup.c: Error!
Error: SPACE_EMPTY_LINE     (line:  20, col:   1):	Space on empty line
e3r11p9% vi test_ft_strdup.c                                      
e3r11p9% cat test_ft_strdup.c                                     
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_strdup.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 16:07:32 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 16:16:37 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>

char	*ft_strdup(char *src);

int	main(void)
{
	char	*duplicated;

	duplicated = ft_strdup("Toto");
	printf("\"%s\" duplicated : \"%s\"\n", "Toto", duplicated);
	free(duplicated);
	duplicated = ft_strdup("");
	printf("\"%s\" duplicated : \"%s\"\n", "", duplicated);
	free(duplicated);
	duplicated = ft_strdup("1");
	printf("\"%s\" duplicated : \"%s\"\n", "", duplicated);
	return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_strdup.c
test_ft_strdup.c: OK!
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_strdup ft_strdup.c test_ft_strdup.c
test_ft_strdup.c: In function ‘main’:
test_ft_strdup.c:23:2: error: implicit declaration of function ‘free’ [-Werror=implicit-function-declaration]
   23 |  free(duplicated);
      |  ^~~~
test_ft_strdup.c:23:2: error: incompatible implicit declaration of built-in function ‘free’ [-Werror]
test_ft_strdup.c:14:1: note: include ‘<stdlib.h>’ or provide a declaration of ‘free’
   13 | #include <stdio.h>
  +++ |+#include <stdlib.h>
   14 | 
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_strdup.c                                     
e3r11p9% cat test_ft_strdup.c                                     
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_strdup.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 16:07:32 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 16:17:16 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <stdlib.h>

char	*ft_strdup(char *src);

int	main(void)
{
	char	*duplicated;

	duplicated = ft_strdup("Toto");
	printf("\"%s\" duplicated : \"%s\"\n", "Toto", duplicated);
	free(duplicated);
	duplicated = ft_strdup("");
	printf("\"%s\" duplicated : \"%s\"\n", "", duplicated);
	free(duplicated);
	duplicated = ft_strdup("1");
	printf("\"%s\" duplicated : \"%s\"\n", "", duplicated);
	return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_strdup.c               
test_ft_strdup.c: OK!
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_strdup ft_strdup.c test_ft_strdup.c
e3r11p9% ./test_ft_strdup                                        
"Toto" duplicated : "Toto"
"" duplicated : ""
"" duplicated : "1"
e3r11p9% vi test_ft_strdup.c                                     
e3r11p9% cat test_ft_strdup.c                                     
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_strdup.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 16:07:32 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 16:17:59 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <stdlib.h>

char	*ft_strdup(char *src);

int	main(void)
{
	char	*duplicated;

	duplicated = ft_strdup("Toto");
	printf("\"%s\" duplicated : \"%s\"\n", "Toto", duplicated);
	free(duplicated);
	duplicated = ft_strdup("");
	printf("\"%s\" duplicated : \"%s\"\n", "", duplicated);
	free(duplicated);
	duplicated = ft_strdup("1");
	printf("\"%s\" duplicated : \"%s\"\n", "1", duplicated);
	return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_strdup.c               
test_ft_strdup.c: OK!
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_strdup ft_strdup.c test_ft_strdup.c
e3r11p9% ./test_ft_strdup                                       
"Toto" duplicated : "Toto"
"" duplicated : ""
"1" duplicated : "1"
e3r11p9% cd ..
e3r11p9% mkdir ex01
e3r11p9% cd ex01
e3r11p9% vi ft_range.c
e3r11p9% cat ft_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_range.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:26:36 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 17:26:46 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

char	*ft_strncpy(char *dest, char *src, unsigned int n)
{
	unsigned int	i;

	if (src && dest && n > 0)
	{
		i = 0;
		while (i < n && src[i] != '\0')
		{
			dest[i] = src[i];
			i++;
		}
		while (i < n)
		{
			dest[i] = '\0';
			i++;
		}
	}
	return (dest);
}

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min >= max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			return (ptr);
		}
	}
	return (NULL);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_range.c                     
ft_range.c: OK!
e3r11p9% vi test_ft_range.c 
e3r11p9% cat test_ft_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_range.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 17:56:03 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	*ft_range(int min, int max);


void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	if (tab && size > 0)
	{
		i = 0;
		while (i < size)
		{
			if (i == 0)
				write(1, "[", 1);
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			if (i == size - 1)
				write(1, "]", 1);
			i++;
		}
	}
}

int	main(void)
{
	int	min;
	int	max;
	int	*tab;

	min = 3;
	max = 8;
	tab = ft_range(min, max);
	printf("Pour min = %d et max = %d, tab =\n", min, max);
	ft_print_int_tab(tab, max - min);
	free(tab);
	min = 42;
	max = 42;
	tab = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab =\n", min, max);
	ft_print_int_tab(tab, max - min);
	free(tab);
	return (0);
	min = -42;
	max = 43;
	tab = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab =\n", min, max);
	ft_print_int_tab(tab, max - min);
	free(tab);
	min = 42;
	max = -1;
	tab = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab =\n", min, max);
	ft_print_int_tab(tab, max - min);
	free(tab);
	return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_range.c 
test_ft_range.c: Error!
Error: CONSECUTIVE_NEWLINES (line:  19, col:   1):	Consecutive newlines
Error: TOO_MANY_LINES       (line:  96, col:   1):	Function has more than 25 lines
e3r11p9% vi test_ft_range.c                                     
e3r11p9% cat test_ft_range.c                                     
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_range.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 17:56:34 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	*ft_range(int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	if (tab && size > 0)
	{
		i = 0;
		while (i < size)
		{
			if (i == 0)
				write(1, "[", 1);
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			if (i == size - 1)
				write(1, "]", 1);
			i++;
		}
	}
}

int	main(void)
{
	int	min;
	int	max;
	int	*tab;

	min = 3;
	max = 8;
	tab = ft_range(min, max);
	printf("Pour min = %d et max = %d, tab =\n", min, max);
	ft_print_int_tab(tab, max - min);
	free(tab);
	min = 42;
	max = 42;
	tab = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab =\n", min, max);
	ft_print_int_tab(tab, max - min);
	free(tab);
	return (0);
	min = -42;
	max = 43;
	tab = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab =\n", min, max);
	ft_print_int_tab(tab, max - min);
	free(tab);
	min = 42;
	max = -1;
	tab = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab =\n", min, max);
	ft_print_int_tab(tab, max - min);
	free(tab);
	return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_range.c
test_ft_range.c: Error!
Error: TOO_MANY_LINES       (line:  95, col:   1):	Function has more than 25 lines
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_range ft_range.c test_ft_range.c   
e3r11p9% ls -al
total 32
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 22 17:57 .
drwxr-xr-x 4 hauerbac 2023_paris  4096 Feb 22 17:15 ..
-rw-r--r-- 1 hauerbac 2023_paris  1495 Feb 22 17:26 ft_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 16312 Feb 22 17:57 test_ft_range
-rw-r--r-- 1 hauerbac 2023_paris  2287 Feb 22 17:56 test_ft_range.c
e3r11p9% ./test_ft_range 
Pour min = 3 et max = 8, tab =

Pour min = 42 et max = 42, tab =
e3r11p9% vi test_ft_range.c                                     
e3r11p9% cat test_ft_range.c                                     
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_range.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 18:00:16 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	*ft_range(int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	if (tab && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
}

int	main(void)
{
	int	min;
	int	max;
	int	*tab1;
	int	*tab2;
	int	*tab3;
	int	*tab4;

	min = 3;
	max = 8;
	tab1 = ft_range(min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	ft_print_int_tab(tab1, max - min);
	free(tab1);
	min = 42;
	max = 42;
	tab2 = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(tab2, max - min);
	free(tab2);
	return (0);
	min = -42;
	max = 43;
	tab3 = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(tab3, max - min);
	free(tab3);
	min = 42;
	max = -1;
	tab4 = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(tab4, max - min);
	free(tab4);
	return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_range.c             
test_ft_range.c: Error!
Error: TOO_MANY_VARS_FUNC   (line:  68, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_LINES       (line:  96, col:   1):	Function has more than 25 lines
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_range ft_range.c test_ft_range.c
e3r11p9% ls -al                                                               
total 32
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 22 18:00 .
drwxr-xr-x 4 hauerbac 2023_paris  4096 Feb 22 17:15 ..
-rw-r--r-- 1 hauerbac 2023_paris  1495 Feb 22 17:26 ft_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 16312 Feb 22 18:00 test_ft_range
-rw-r--r-- 1 hauerbac 2023_paris  2299 Feb 22 18:00 test_ft_range.c
e3r11p9% ./test_ft_range                                       
Pour min = 3 et max = 8, tab1 =

Pour min = 42 et max = 42, tab2 =
e3r11p9% vi test_ft_range.c                                     
e3r11p9% cat test_ft_range.c                                     
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_range.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 18:58:36 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	*ft_range(int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	if (tab && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
}

int	main(void)
{
	int	min;
	int	max;
	int	*tab1;
	int	*tab2;
	int	*tab3;
	int	*tab4;

	min = 3;
	max = 8;
	tab1 = ft_range(min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	ft_print_int_tab(tab1, max - min);
	free(tab1);
	min = 42;
	max = 42;
	tab2 = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(tab2, max - min);
	free(tab2);
	min = -42;
	max = 43;
	tab3 = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(tab3, max - min);
	free(tab3);
	min = 42;
	max = -1;
	tab4 = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(tab4, max - min);
	free(tab4);
	return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_range.c             
test_ft_range.c: Error!
Error: TOO_MANY_VARS_FUNC   (line:  68, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_LINES       (line:  95, col:   1):	Function has more than 25 lines
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_range ft_range.c test_ft_range.c
e3r11p9% ls -al                                                
total 32
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 22 18:58 .
drwxr-xr-x 4 hauerbac 2023_paris  4096 Feb 22 17:15 ..
-rw-r--r-- 1 hauerbac 2023_paris  1495 Feb 22 17:26 ft_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 16312 Feb 22 18:58 test_ft_range
-rw-r--r-- 1 hauerbac 2023_paris  2286 Feb 22 18:58 test_ft_range.c
e3r11p9% ./test_ft_range                                       
Pour min = 3 et max = 8, tab1 =

Pour min = 42 et max = 42, tab2 =

Pour min = -42 et max = 43, tab3 =

Pour min = 42 et max = -1, tab4 =
e3r11p9% vi test_ft_range.c                                     
e3r11p9% cat test_ft_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_range.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 19:07:10 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	*ft_range(int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
}

int	main(void)
{
	int	min;
	int	max;
	int	*tab1;
	int	*tab2;
	int	*tab3;
	int	*tab4;

	min = 3;
	max = 8;
	tab1 = ft_range(min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	ft_print_int_tab(tab1, max - min);
	free(tab1);
	min = 42;
	max = 42;
	tab2 = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(tab2, max - min);
	free(tab2);
	min = -42;
	max = 43;
	tab3 = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(tab3, max - min);
	free(tab3);
	min = 42;
	max = -1;
	tab4 = ft_range(min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(tab4, max - min);
	free(tab4);
	return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_range.c             
test_ft_range.c: Error!
Error: TOO_MANY_VARS_FUNC   (line:  68, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_LINES       (line:  95, col:   1):	Function has more than 25 lines
e3r11p9% vi ft_range.c                                     
e3r11p9% cat ft_range.c                                    
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_range.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:26:36 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/22 19:12:39 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

char	*ft_strncpy(char *dest, char *src, unsigned int n)
{
	unsigned int	i;

	if (src && dest && n > 0)
	{
		i = 0;
		while (i < n && src[i] != '\0')
		{
			dest[i] = src[i];
			i++;
		}
		while (i < n)
		{
			dest[i] = '\0';
			i++;
		}
	}
	return (dest);
}

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			return (ptr);
		}
	}
	return (NULL);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_range.c
ft_range.c: OK!
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_range ft_range.c test_ft_range.c
e3r11p9% ls -al                                                
total 32
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 22 19:13 .
drwxr-xr-x 4 hauerbac 2023_paris  4096 Feb 22 17:15 ..
-rw-r--r-- 1 hauerbac 2023_paris  1494 Feb 22 19:12 ft_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 16312 Feb 22 19:13 test_ft_range
-rw-r--r-- 1 hauerbac 2023_paris  2294 Feb 22 19:07 test_ft_range.c
e3r11p9% ./test_ft_range                                       
Pour min = 3 et max = 8, tab1 =
[3, 4, 5, 6, 7]
Pour min = 42 et max = 42, tab2 =

Pour min = -42 et max = 43, tab3 =
[-42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]
Pour min = 42 et max = -1, tab4 =
e3r11p9% cd ..
--------------------------------------------------------------------------------------------------------------------------------------
hauerbac (Hélène)
 — 
Aujourd’hui à 08:43
Bonjour,
Je ne comprends pas l'enonce du ex02/ft_ultimate_range.c : ne devrait-ce pas etre "Écrire une fonction ft_ultimate_range qui alloue et assigne un tableau de tableaux d’int." (au lieu de "Écrire une fonction ft_ultimate_range qui alloue et assigne un tableau d’int.")?

octoross (Océane)
 — 
Aujourd’hui à 08:50
Coucou !
Tu alloues un tableau de min à max comme l'exo 1 mais cette fois qui est pointé par range (je n'avais pas trop compris non plus tkt😅)

hauerbac (Hélène)
 — 
Aujourd’hui à 09:55
Merci. Je m'excuse d'insister autant, mais je suis vraiment surprise par la "faible complexification" par rapport a l'exercice precedent : cette interpretation de l'exo a-t-elle ete validee par la Moulinette?

ebouvier (Elliot)
 — 
Aujourd’hui à 11:01
C'est bien un pointer sur un tableau d'int et non pas un tableau 2D
--------------------------------------------------------------------------------------------------------------------------------------
e3r11p9% cd
e3r11p9% cd c_07
e3r11p9% ls
ex00  ex01  ex02
e3r11p9% cd ex02
e3r11p9% ls
e3r11p9% vi ft_ultimate_range.c
e3r11p9% cd ex01
cd: no such file or directory: ex01
e3r11p9% cd ../ex01
e3r11p9% vi ft_range.c 
e3r11p9% cat ft_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_range.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:26:36 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 09:05:04 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			return (ptr);
		}
	}
	return (NULL);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_range.c 
ft_range.c: OK!
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_range ft_range.c test_ft_range.c 
e3r11p9% ls -al
total 32
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 23 09:07 .
drwxr-xr-x 5 hauerbac 2023_paris  4096 Feb 22 19:16 ..
-rw-r--r-- 1 hauerbac 2023_paris  1235 Feb 23 09:05 ft_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 16280 Feb 23 09:07 test_ft_range
-rw-r--r-- 1 hauerbac 2023_paris  2294 Feb 22 19:07 test_ft_range.c
e3r11p9% ./test_ft_range 
Pour min = 3 et max = 8, tab1 =
[3, 4, 5, 6, 7]
Pour min = 42 et max = 42, tab2 =

Pour min = -42 et max = 43, tab3 =
[-42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]
Pour min = 42 et max = -1, tab4 =
e3r11p9% cd ../ex02
e3r11p9% ls
ft_ultimate_range.c
e3r11p9% cat ft_ultimate_range.c 
#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			return (ptr);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		range = (int **) malloc(range_len * sizeof(int *));
		if (range)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
			{
				ptr = ft_range(min, max);
				if (ptr)
				{
					range[i++] = ptr;
					value++;
				}
				else
					return (-1);

			}
			return (range_len);
		}
		else
		{
			range = NULL;
			return (-1);
		}
	}
	else
	{
		range = NULL;
		return (0);
	}
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c         
ft_ultimate_range.c: Error!
Error: INVALID_HEADER       (line:   1, col:   1):	Missing or invalid 42 header
Error: EMPTY_LINE_FUNCTION  (line:  51, col:   1):	Empty line in function
Error: TOO_MANY_LINES       (line:  66, col:   1):	Function has more than 25 lines
e3r11p9% vi ft_ultimate_range.c 
e3r11p9% cat ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 09:50:54 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 09:50:57 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			return (ptr);
		}
	}
	return (NULL);
}

int	ft_subranges(int **range, int range_len, int min, int max)
{
	int	*ptr;
	int	i;
	int	value;

	value = min;
	i = 0;
	while (i < range_len && value < max)
	{
		ptr = ft_range(min, max);
		if (ptr)
		{
			range[i++] = ptr;
			value++;
		}
		else
			return (-1);
	}
	if (i == range_len)
		return (range_len);
	else
		return (-1);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	nb;

	if (min < max)
	{
		range_len = max - min;
		range = (int **) malloc(range_len * sizeof(int *));
		if (range)
		{
			nb = ft_subranges(range, range_len, min, max);
			return (nb);
		}
		else
		{
			range = NULL;
			return (-1);
		}
	}
	else
	{
		range = NULL;
		return (0);
	}
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c
ft_ultimate_range.c: OK!
e3r11p9% cp ft_ultimate_range.c ft_ultimate_range_0.c
e3r11p9% vi ft_ultimate_range
e3r11p9% ls -al                
total 20
drwxr-xr-x 2 hauerbac 2023_paris 4096 Feb 23 10:18 .
drwxr-xr-x 5 hauerbac 2023_paris 4096 Feb 22 19:16 ..
-rw-r--r-- 1 hauerbac 2023_paris 1441 Feb 23 10:18 ft_ultimate_range
-rw-r--r-- 1 hauerbac 2023_paris 1930 Feb 23 09:57 ft_ultimate_range_0.c
-rw-r--r-- 1 hauerbac 2023_paris 1930 Feb 23 09:50 ft_ultimate_range.c
e3r11p9% rm ft_ultimate_range.c
e3r11p9% mv ft_ultimate_range ft_ultimate_range.c
e3r11p9% ls -al
total 16
drwxr-xr-x 2 hauerbac 2023_paris 4096 Feb 23 10:20 .
drwxr-xr-x 5 hauerbac 2023_paris 4096 Feb 22 19:16 ..
-rw-r--r-- 1 hauerbac 2023_paris 1930 Feb 23 09:57 ft_ultimate_range_0.c
-rw-r--r-- 1 hauerbac 2023_paris 1441 Feb 23 10:18 ft_ultimate_range.c
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c
ft_ultimate_range.c: Error!
	Error: Unrecognized token line 1, col 81
e3r11p9% vi ft_ultimate_range.c                                     
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c
ft_ultimate_range.c: Error!
Error: TOO_MANY_LINES       (line:  54, col:   1):	Function has more than 25 lines
e3r11p9% vi ft_ultimate_range.c 
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c
ft_ultimate_range.c: OK!
e3r11p9% cat ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 10:29:02 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			range = &ptr;
			return (range_len);
		}
		else
		{
			range = NULL;
			return (-1);
		}
	}
	else
	{
		range = NULL;
		return (0);
	}
}
e3r11p9% cp ../ex01/test_ft_range.c test_ft_ultimate_range.c 
e3r11p9% vi test_ft_ultimate_range.c 
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_ultimate_range.c 
test_ft_ultimate_range.c: Error!
Error: LINE_TOO_LONG        (line:  61, col: 145):	line too long
Error: LINE_TOO_LONG        (line:  63, col: 101):	line too long
Error: TOO_MANY_VARS_FUNC   (line:  73, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_VARS_FUNC   (line:  74, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_VARS_FUNC   (line:  75, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_VARS_FUNC   (line:  76, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_VARS_FUNC   (line:  77, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_LINES       (line: 108, col:   1):	Function has more than 25 lines
e3r11p9% cat test_ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 12:14:11 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**tab1;
	int	tab1_size;
	int	**tab2;
	int	tab2_size;
	int	**tab3;
	int	tab3_size;
	int	**tab4;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	ft_print_int_tab(*tab1, tab1_size);
	free(*tab1);
	free(tab1);
	min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);
	return (0);
}
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_ultimate_range ft_ultimate_range.c test_ft_ultimate_range.c 
ft_ultimate_range.c: In function ‘ft_ultimate_range’:
ft_ultimate_range.c:46:6: error: unused variable ‘value’ [-Werror=unused-variable]
   46 |  int value;
      |      ^~~~~
ft_ultimate_range.c:45:6: error: unused variable ‘i’ [-Werror=unused-variable]
   45 |  int i;
      |      ^
ft_ultimate_range.c:41:29: error: parameter ‘range’ set but not used [-Werror=unused-but-set-parameter]
   41 | int ft_ultimate_range(int **range, int min, int max)
      |                       ~~~~~~^~~~~
cc1: all warnings being treated as errors
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:81:14: error: ‘tab1’ is used uninitialized in this function [-Werror=uninitialized]
   81 |  tab1_size = ft_ultimate_range(tab1, min, max);
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
test_ft_ultimate_range.c:88:14: error: ‘tab2’ is used uninitialized in this function [-Werror=uninitialized]
   88 |  tab2_size = ft_ultimate_range(tab2, min, max);
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
test_ft_ultimate_range.c:95:14: error: ‘tab3’ is used uninitialized in this function [-Werror=uninitialized]
   95 |  tab3_size = ft_ultimate_range(tab3, min, max);
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
test_ft_ultimate_range.c:102:14: error: ‘tab4’ is used uninitialized in this function [-Werror=uninitialized]
  102 |  tab4_size = ft_ultimate_range(tab4, min, max);
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
e3r11p9% vi ft_ultimate_range.c                                      
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c                               
ft_ultimate_range.c: OK!
e3r11p9% cat ft_ultimate_range.c                                   
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 12:29:20 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			range = &ptr;
			return (range_len);
		}
		else
			return (-1);
	}
	else
		return (0);
}
e3r11p9% vi test_ft_ultimate_range.c 
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_ultimate_range.c 
test_ft_ultimate_range.c: Error!
Error: LINE_TOO_LONG        (line:  61, col: 145):	line too long
Error: LINE_TOO_LONG        (line:  63, col: 101):	line too long
Error: DECL_ASSIGN_LINE     (line:  70, col:  16):	Declaration and assignation on a single line
Error: DECL_ASSIGN_LINE     (line:  72, col:  16):	Declaration and assignation on a single line
Error: TOO_MANY_VARS_FUNC   (line:  73, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_VARS_FUNC   (line:  74, col:   1):	Too many variables declarations in a function
Error: DECL_ASSIGN_LINE     (line:  74, col:  16):	Declaration and assignation on a single line
Error: TOO_MANY_VARS_FUNC   (line:  75, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_VARS_FUNC   (line:  76, col:   1):	Too many variables declarations in a function
Error: DECL_ASSIGN_LINE     (line:  76, col:  16):	Declaration and assignation on a single line
Error: TOO_MANY_VARS_FUNC   (line:  77, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_LINES       (line: 108, col:   1):	Function has more than 25 lines
e3r11p9% cat test_ft_ultimate_range.c                                   
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 12:32:44 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	ft_print_int_tab(*tab1, tab1_size);
	free(*tab1);
	free(tab1);
	min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);
	return (0);
}
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_ultimate_range ft_ultimate_range.c test_ft_ultimate_range.c
ft_ultimate_range.c: In function ‘ft_ultimate_range’:
ft_ultimate_range.c:41:29: error: parameter ‘range’ set but not used [-Werror=unused-but-set-parameter]
   41 | int ft_ultimate_range(int **range, int min, int max)
      |                       ~~~~~~^~~~~
cc1: all warnings being treated as errors
e3r11p9% vi ft_ultimate_range.c                                      
e3r11p9% cat ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 12:34:59 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			range = &ptr;
			return (range_len);
		}
		if (range == NULL)
			return (-1);
	}
	else
		return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c 
ft_ultimate_range.c: OK!
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_ultimate_range ft_ultimate_range.c test_ft_ultimate_range.c
ft_ultimate_range.c: In function ‘ft_ultimate_range’:
ft_ultimate_range.c:61:1: error: control reaches end of non-void function [-Werror=return-type]
   61 | }
      | ^
cc1: all warnings being treated as errors
e3r11p9% vi ft_ultimate_range.c                                     
e3r11p9% cat ft_ultimate_range.c                                                                       
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 12:37:17 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			range = &ptr;
			return (range_len);
		}
		else if (range == NULL)
			return (-1);
	}
	else
		return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c                                    
ft_ultimate_range.c: OK!
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_ultimate_range ft_ultimate_range.c test_ft_ultimate_range.c
ft_ultimate_range.c: In function ‘ft_ultimate_range’:
ft_ultimate_range.c:61:1: error: control reaches end of non-void function [-Werror=return-type]
   61 | }
      | ^
cc1: all warnings being treated as errors
e3r11p9% vi ft_ultimate_range.c                                     
e3r11p9% cat ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 12:39:24 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			range = &ptr;
			return (range_len);
		}
		else if (range == NULL)
			return (-1);
		return (-1);
	}
	else
		return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c                                    
ft_ultimate_range.c: OK!
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_ultimate_range ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ls -al
total 36
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 23 12:39 .
drwxr-xr-x 5 hauerbac 2023_paris  4096 Feb 22 19:16 ..
-rw-r--r-- 1 hauerbac 2023_paris  1930 Feb 23 09:57 ft_ultimate_range_0.c
-rw-r--r-- 1 hauerbac 2023_paris  1598 Feb 23 12:39 ft_ultimate_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 16328 Feb 23 12:39 test_ft_ultimate_range
-rw-r--r-- 1 hauerbac 2023_paris  2890 Feb 23 12:32 test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range 
Pour min = 3 et max = 8, tab1 =
zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% gcc -g3 -Wall -Wextra -Werror -o test_ft_ultimate_range ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ls -al
total 92
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 23 12:51 .
drwxr-xr-x 5 hauerbac 2023_paris  4096 Feb 22 19:16 ..
-rw-r--r-- 1 hauerbac 2023_paris  1930 Feb 23 09:57 ft_ultimate_range_0.c
-rw-r--r-- 1 hauerbac 2023_paris  1598 Feb 23 12:39 ft_ultimate_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 71584 Feb 23 12:51 test_ft_ultimate_range
-rw-r--r-- 1 hauerbac 2023_paris  2890 Feb 23 12:32 test_ft_ultimate_range.c
e3r11p9% valgrind ./test_ft_ultimate_range 
==97188== Memcheck, a memory error detector
==97188== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==97188== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==97188== Command: ./test_ft_ultimate_range
==97188== 
Pour min = 3 et max = 8, tab1 =
==97188== Invalid read of size 8
==97188==    at 0x109558: main (test_ft_ultimate_range.c:83)
==97188==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==97188== 
==97188== 
==97188== Process terminating with default action of signal 11 (SIGSEGV)
==97188==  Access not within mapped region at address 0x0
==97188==    at 0x109558: main (test_ft_ultimate_range.c:83)
==97188==  If you believe this happened as a result of a stack
==97188==  overflow in your program's main thread (unlikely but
==97188==  possible), you can try to increase the size of the
==97188==  main thread stack using the --main-stacksize= flag.
==97188==  The main thread stack size used in this run was 8388608.
==97188== 
==97188== HEAP SUMMARY:
==97188==     in use at exit: 1,044 bytes in 2 blocks
==97188==   total heap usage: 2 allocs, 0 frees, 1,044 bytes allocated
==97188== 
==97188== LEAK SUMMARY:
==97188==    definitely lost: 20 bytes in 1 blocks
==97188==    indirectly lost: 0 bytes in 0 blocks
==97188==      possibly lost: 0 bytes in 0 blocks
==97188==    still reachable: 1,024 bytes in 1 blocks
==97188==         suppressed: 0 bytes in 0 blocks
==97188== Rerun with --leak-check=full to see details of leaked memory
==97188== 
==97188== For lists of detected and suppressed errors, rerun with: -s
==97188== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
zsh: segmentation fault (core dumped)  valgrind ./test_ft_ultimate_range
e3r11p9% gcc -g -Wall -Wextra -Werror -o test_ft_ultimate_range ft_ultimate_range.c test_ft_ultimate_range.c 
e3r11p9% ls -al
total 40
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 23 12:54 .
drwxr-xr-x 5 hauerbac 2023_paris  4096 Feb 22 19:16 ..
-rw-r--r-- 1 hauerbac 2023_paris  1930 Feb 23 09:57 ft_ultimate_range_0.c
-rw-r--r-- 1 hauerbac 2023_paris  1598 Feb 23 12:39 ft_ultimate_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 18912 Feb 23 12:54 test_ft_ultimate_range
-rw-r--r-- 1 hauerbac 2023_paris  2890 Feb 23 12:32 test_ft_ultimate_range.c
e3r11p9% lldb test_ft_ultimate_range 
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 12 at test_ft_ultimate_range.c:70:8, address = 0x00000000000014f6
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 97615 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 97615 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x00005555555554f6 test_ft_ultimate_range`main at test_ft_ultimate_range.c:70:8
   67  	{
   68  		int	min;
   69  		int	max;
-> 70  		int	**tab1 = NULL;
   71  		int	tab1_size;
   72  		int	**tab2 = NULL;
   73  		int	tab2_size;
(lldb) n
Process 97615 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = step over
    frame #0: 0x00005555555554fe test_ft_ultimate_range`main at test_ft_ultimate_range.c:72:8
   69  		int	max;
   70  		int	**tab1 = NULL;
   71  		int	tab1_size;
-> 72  		int	**tab2 = NULL;
   73  		int	tab2_size;
   74  		int	**tab3 = NULL;
   75  		int	tab3_size;
(lldb) n
Process 97615 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = step over
    frame #0: 0x0000555555555506 test_ft_ultimate_range`main at test_ft_ultimate_range.c:74:8
   71  		int	tab1_size;
   72  		int	**tab2 = NULL;
   73  		int	tab2_size;
-> 74  		int	**tab3 = NULL;
   75  		int	tab3_size;
   76  		int	**tab4 = NULL;
   77  		int	tab4_size;
(lldb) n
Process 97615 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = step over
    frame #0: 0x000055555555550e test_ft_ultimate_range`main at test_ft_ultimate_range.c:76:8
   73  		int	tab2_size;
   74  		int	**tab3 = NULL;
   75  		int	tab3_size;
-> 76  		int	**tab4 = NULL;
   77  		int	tab4_size;
   78  	
   79  		min = 3;
(lldb) n
Process 97615 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = step over
    frame #0: 0x0000555555555516 test_ft_ultimate_range`main at test_ft_ultimate_range.c:79:6
   76  		int	**tab4 = NULL;
   77  		int	tab4_size;
   78  	
-> 79  		min = 3;
   80  		max = 8;
   81  		tab1_size = ft_ultimate_range(tab1, min, max);
   82  		printf("Pour min = %d et max = %d, tab1 =\n", min, max);
(lldb) n
Process 97615 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = step over
    frame #0: 0x000055555555551d test_ft_ultimate_range`main at test_ft_ultimate_range.c:80:6
   77  		int	tab4_size;
   78  	
   79  		min = 3;
-> 80  		max = 8;
   81  		tab1_size = ft_ultimate_range(tab1, min, max);
   82  		printf("Pour min = %d et max = %d, tab1 =\n", min, max);
   83  		ft_print_int_tab(*tab1, tab1_size);
(lldb) n
Process 97615 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = step over
    frame #0: 0x0000555555555524 test_ft_ultimate_range`main at test_ft_ultimate_range.c:81:14
   78  	
   79  		min = 3;
   80  		max = 8;
-> 81  		tab1_size = ft_ultimate_range(tab1, min, max);
   82  		printf("Pour min = %d et max = %d, tab1 =\n", min, max);
   83  		ft_print_int_tab(*tab1, tab1_size);
   84  		free(*tab1);
(lldb) n
Process 97615 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = step over
    frame #0: 0x000055555555553b test_ft_ultimate_range`main at test_ft_ultimate_range.c:82:2
   79  		min = 3;
   80  		max = 8;
   81  		tab1_size = ft_ultimate_range(tab1, min, max);
-> 82  		printf("Pour min = %d et max = %d, tab1 =\n", min, max);
   83  		ft_print_int_tab(*tab1, tab1_size);
   84  		free(*tab1);
   85  		free(tab1);
(lldb) n
Pour min = 3 et max = 8, tab1 =
Process 97615 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = step over
    frame #0: 0x0000555555555554 test_ft_ultimate_range`main at test_ft_ultimate_range.c:83:2
   80  		max = 8;
   81  		tab1_size = ft_ultimate_range(tab1, min, max);
   82  		printf("Pour min = %d et max = %d, tab1 =\n", min, max);
-> 83  		ft_print_int_tab(*tab1, tab1_size);
   84  		free(*tab1);
   85  		free(tab1);
   86  		min = 42;
(lldb) n
Process 97615 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)
    frame #0: 0x0000555555555558 test_ft_ultimate_range`main at test_ft_ultimate_range.c:83:2
   80  		max = 8;
   81  		tab1_size = ft_ultimate_range(tab1, min, max);
   82  		printf("Pour min = %d et max = %d, tab1 =\n", min, max);
-> 83  		ft_print_int_tab(*tab1, tab1_size);
   84  		free(*tab1);
   85  		free(tab1);
   86  		min = 42;
(lldb) n
Process 97615 exited with status = 11 (0x0000000b) 
(lldb) q
-------------------------------------------------------------------------------------------------------------------------
e3r11p9% pwd
/mnt/nfs/homes/hauerbac/c_07/ex02
e3r11p9% vi test_ft_ultimate_range.c
e3r11p9% cat test_ft_ultimate_range.c
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 15:24:08 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("tab1 = %d\n", tab1);
	ft_print_int_tab(*tab1, tab1_size);
	free(*tab1);
	free(tab1);
	min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);
	return (0);
}
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c 
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:83:18: error: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘int **’ [-Werror=format=]
   83 |  printf("tab1 = %d\n", tab1);
      |                 ~^     ~~~~
      |                  |     |
      |                  int   int **
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                                       
e3r11p9% cat test_ft_ultimate_range.c                                                                       
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 15:26:21 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("*tab1 = %d\n", *tab1);
	ft_print_int_tab(*tab1, tab1_size);
	free(*tab1);
	free(tab1);
	min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);
	return (0);
}
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:83:19: error: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘int *’ [-Werror=format=]
   83 |  printf("*tab1 = %d\n", *tab1);
      |                  ~^     ~~~~~
      |                   |     |
      |                   int   int *
      |                  %ls
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                                       
e3r11p9% cat test_ft_ultimate_range.c                                                                       
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 15:26:55 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("*tab1 = %ls\n", *tab1);
	ft_print_int_tab(*tab1, tab1_size);
	free(*tab1);
	free(tab1);
	min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);
	return (0);
}
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ls -al
total 40
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 23 15:27 .
drwxr-xr-x 5 hauerbac 2023_paris  4096 Feb 22 19:16 ..
-rw-r--r-- 1 hauerbac 2023_paris  1930 Feb 23 09:57 ft_ultimate_range_0.c
-rw-r--r-- 1 hauerbac 2023_paris  1598 Feb 23 12:39 ft_ultimate_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 18912 Feb 23 15:27 test_ft_ultimate_range
-rw-r--r-- 1 hauerbac 2023_paris  2923 Feb 23 15:26 test_ft_ultimate_range.c
e3r11p9% lldb test_ft_ultimate_range 
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 12 at test_ft_ultimate_range.c:70:8, address = 0x00000000000014f6
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 119526 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 119526 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x00005555555554f6 test_ft_ultimate_range`main at test_ft_ultimate_range.c:70:8
   67  	{
   68  		int	min;
   69  		int	max;
-> 70  		int	**tab1 = NULL;
   71  		int	tab1_size;
   72  		int	**tab2 = NULL;
   73  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
Pour min = 3 et max = 8, tab1 =
e3r11p9% vi test_ft_ultimate_range.c                                                                       
e3r11p9% cat test_ft_ultimate_range.c                                                                       
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 15:31:52 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**tab1;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("*tab1 = %ls\n", *tab1);
	ft_print_int_tab(*tab1, tab1_size);
	free(*tab1);
	free(tab1);
	min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);
	return (0);
}
e3r11p9% gcc -Wall -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:81:14: error: ‘tab1’ is used uninitialized in this function [-Werror=uninitialized]
   81 |  tab1_size = ft_ultimate_range(tab1, min, max);
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c 
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:81:14: error: ‘tab1’ is used uninitialized in this function [-Werror=uninitialized]
   81 |  tab1_size = ft_ultimate_range(tab1, min, max);
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
e3r11p9% gcc -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c 
e3r11p9% lldb test_ft_ultimate_range                                                                       
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 12 at test_ft_ultimate_range.c:72:8, address = 0x00000000000014f6
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 119879 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 119879 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x00005555555554f6 test_ft_ultimate_range`main at test_ft_ultimate_range.c:72:8
   69  		int	max;
   70  		int	**tab1;
   71  		int	tab1_size;
-> 72  		int	**tab2 = NULL;
   73  		int	tab2_size;
   74  		int	**tab3 = NULL;
   75  		int	tab3_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
e3r11p9% vi test_ft_ultimate_range.c                                                                       
e3r11p9% cat test_ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 15:34:32 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("*tab1 = %ls\n", *tab1);
	ft_print_int_tab(*tab1, tab1_size);
	free(*tab1);
	free(tab1);
	min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);
	return (0);
}
e3r11p9% vi ft_ultimate_range.c 
e3r11p9% cat ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 15:35:10 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			*range = &ptr;
			return (range_len);
		}
		else if (range == NULL)
			return (-1);
		return (-1);
	}
	else
		return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
ft_ultimate_range.c: In function ‘ft_ultimate_range’:
ft_ultimate_range.c:53:11: error: assignment to ‘int *’ from incompatible pointer type ‘int **’ [-Werror=incompatible-pointer-types]
   53 |    *range = &ptr;
      |           ^
cc1: all warnings being treated as errors
e3r11p9% vi ft_ultimate_range.c                                                                      
e3r11p9% cat ft_ultimate_range.c                                                                      
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 15:36:01 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			*range = ptr;
			return (range_len);
		}
		else if (range == NULL)
			return (-1);
		return (-1);
	}
	else
		return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c
ft_ultimate_range.c: OK!
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_ultimate_range.c
test_ft_ultimate_range.c: Error!
Error: LINE_TOO_LONG        (line:  61, col: 145):	line too long
Error: LINE_TOO_LONG        (line:  63, col: 101):	line too long
Error: DECL_ASSIGN_LINE     (line:  70, col:  16):	Declaration and assignation on a single line
Error: DECL_ASSIGN_LINE     (line:  72, col:  16):	Declaration and assignation on a single line
Error: TOO_MANY_VARS_FUNC   (line:  73, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_VARS_FUNC   (line:  74, col:   1):	Too many variables declarations in a function
Error: DECL_ASSIGN_LINE     (line:  74, col:  16):	Declaration and assignation on a single line
Error: TOO_MANY_VARS_FUNC   (line:  75, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_VARS_FUNC   (line:  76, col:   1):	Too many variables declarations in a function
Error: DECL_ASSIGN_LINE     (line:  76, col:  16):	Declaration and assignation on a single line
Error: TOO_MANY_VARS_FUNC   (line:  77, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_LINES       (line: 109, col:   1):	Function has more than 25 lines
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ls -al
total 40
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 23 15:37 .
drwxr-xr-x 5 hauerbac 2023_paris  4096 Feb 22 19:16 ..
-rw-r--r-- 1 hauerbac 2023_paris  1930 Feb 23 09:57 ft_ultimate_range_0.c
-rw-r--r-- 1 hauerbac 2023_paris  1598 Feb 23 15:36 ft_ultimate_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 18904 Feb 23 15:37 test_ft_ultimate_range
-rw-r--r-- 1 hauerbac 2023_paris  2923 Feb 23 15:34 test_ft_ultimate_range.c
e3r11p9% lldb test_ft_ultimate_range 
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 12 at test_ft_ultimate_range.c:70:8, address = 0x00000000000014d4
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 120560 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 120560 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x00005555555554d4 test_ft_ultimate_range`main at test_ft_ultimate_range.c:70:8
   67  	{
   68  		int	min;
   69  		int	max;
-> 70  		int	**tab1 = NULL;
   71  		int	tab1_size;
   72  		int	**tab2 = NULL;
   73  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
e3r11p9% vi ft_ultimate_range.c                                     
e3r11p9% cat ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 15:43:43 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	if (min < max)
	{
		range = (int **) malloc(sizeof(int *));
		if (range == NULL)
			return (-1);
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			*range = &ptr;
			return (range_len);
		}
		return (-1);
	}
	else
		return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c                            
ft_ultimate_range.c: OK!
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
ft_ultimate_range.c: In function ‘ft_ultimate_range’:
ft_ultimate_range.c:55:11: error: assignment to ‘int *’ from incompatible pointer type ‘int **’ [-Werror=incompatible-pointer-types]
   55 |    *range = &ptr;
      |           ^
cc1: all warnings being treated as errors
e3r11p9% vi ft_ultimate_range.c                                     
e3r11p9% cat ft_ultimate_range.c                                     
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 15:45:09 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	if (min < max)
	{
		range = (int **) malloc(sizeof(int *));
		if (range == NULL)
			return (-1);
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			range = &ptr;
			return (range_len);
		}
		return (-1);
	}
	else
		return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c                                 
ft_ultimate_range.c: OK!
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% lldb test_ft_ultimate_range                                
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 12 at test_ft_ultimate_range.c:70:8, address = 0x00000000000014fc
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 121363 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 121363 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x00005555555554fc test_ft_ultimate_range`main at test_ft_ultimate_range.c:70:8
   67  	{
   68  		int	min;
   69  		int	max;
-> 70  		int	**tab1 = NULL;
   71  		int	tab1_size;
   72  		int	**tab2 = NULL;
   73  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
e3r11p9% vi ft_ultimate_range.c                                     
e3r11p9% cat ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 16:19:15 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		/*range = (int **) malloc(sizeof(int *));
		if (range == NULL)
			return (-1);*/
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			range = &ptr;
			return (range_len);
		}
		else if (range == NULL)
			return (-1);
		return (-1);
	}
	else
		return (0);
}
e3r11p9% vi test_ft_ultimate_range.c
e3r11p9% cat test_ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 16:21:40 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	*tab1 = NULL;
	int	tab1_size;
	int	*tab2 = NULL;
	int	tab2_size;
	int	*tab3 = NULL;
	int	tab3_size;
	int	*tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("*tab1 = %ls\n", *tab1);
	ft_print_int_tab(tab1, tab1_size);
	free(*tab1);
	free(tab1);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:83:20: error: format ‘%ls’ expects argument of type ‘wchar_t *’, but argument 2 has type ‘int’ [-Werror=format=]
   83 |  printf("*tab1 = %ls\n", *tab1);
      |                  ~~^     ~~~~~
      |                    |     |
      |                    int * int
      |                  %d
test_ft_ultimate_range.c:85:7: error: passing argument 1 of ‘free’ makes pointer from integer without a cast [-Werror=int-conversion]
   85 |  free(*tab1);
      |       ^~~~~
      |       |
      |       int
In file included from test_ft_ultimate_range.c:15:
/usr/include/stdlib.h:555:25: note: expected ‘void *’ but argument is of type ‘int’
  555 | extern void free (void *__ptr) __THROW;
      |                   ~~~~~~^~~~~
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                             
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 16:25:50 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;i
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	*tab2 = NULL;
	int	tab2_size;
	int	*tab3 = NULL;
	int	tab3_size;
	int	*tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %ls\n", &tab1);
	ft_print_int_tab(tab1, tab1_size);
	ptr = &tab1;
	free(tab1);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:69:10: error: ‘i’ undeclared (first use in this function)
   69 |  int max;i
      |          ^
test_ft_ultimate_range.c:69:10: note: each undeclared identifier is reported only once for each function it appears in
test_ft_ultimate_range.c:69:11: error: expected ‘;’ before ‘int’
   69 |  int max;i
      |           ^
      |           ;
   70 |  int **ptr;
      |  ~~~       
test_ft_ultimate_range.c:84:20: error: format ‘%ls’ expects argument of type ‘wchar_t *’, but argument 2 has type ‘int **’ [-Werror=format=]
   84 |  printf("&tab1 = %ls\n", &tab1);
      |                  ~~^     ~~~~~
      |                    |     |
      |                    int * int **
test_ft_ultimate_range.c:86:2: error: ‘ptr’ undeclared (first use in this function)
   86 |  ptr = &tab1;
      |  ^~~
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 16:26:20 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	*tab2 = NULL;
	int	tab2_size;
	int	*tab3 = NULL;
	int	tab3_size;
	int	*tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %ls\n", &tab1);
	ft_print_int_tab(tab1, tab1_size);
	ptr = &tab1;
	free(tab1);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:84:20: error: format ‘%ls’ expects argument of type ‘wchar_t *’, but argument 2 has type ‘int **’ [-Werror=format=]
   84 |  printf("&tab1 = %ls\n", &tab1);
      |                  ~~^     ~~~~~
      |                    |     |
      |                    int * int **
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 16:30:28 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	*tab2 = NULL;
	int	tab2_size;
	int	*tab3 = NULL;
	int	tab3_size;
	int	*tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %lls\n", &tab1);
	ft_print_int_tab(tab1, tab1_size);
	ptr = &tab1;
	free(tab1);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:84:21: error: use of ‘ll’ length modifier with ‘s’ type character has either no effect or undefined behavior [-Werror=format=]
   84 |  printf("&tab1 = %lls\n", &tab1);
      |                     ^
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 16:30:56 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	*tab2 = NULL;
	int	tab2_size;
	int	*tab3 = NULL;
	int	tab3_size;
	int	*tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %llu\n", &tab1);
	ft_print_int_tab(tab1, tab1_size);
	ptr = &tab1;
	free(tab1);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:84:21: error: format ‘%llu’ expects argument of type ‘long long unsigned int’, but argument 2 has type ‘int **’ [-Werror=format=]
   84 |  printf("&tab1 = %llu\n", &tab1);
      |                  ~~~^     ~~~~~
      |                     |     |
      |                     |     int **
      |                     long long unsigned int
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 16:32:16 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	*tab2 = NULL;
	int	tab2_size;
	int	*tab3 = NULL;
	int	tab3_size;
	int	*tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ft_print_int_tab(tab1, tab1_size);
	ptr = &tab1;
	free(tab1);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% lldb test_ft_ultimate_range                                                                  
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 27 at test_ft_ultimate_range.c:71:7, address = 0x0000000000001505
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 126955 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 126955 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x0000555555555505 test_ft_ultimate_range`main at test_ft_ultimate_range.c:71:7
   68  		int	min;
   69  		int	max;
   70  		int	**ptr;
-> 71  		int	*tab1 = NULL;
   72  		int	tab1_size;
   73  		int	*tab2 = NULL;
   74  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7fffffffe3e0
The returned size of range is 5.
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 16:37:59 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	**tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("tab1 = %p\n", tab1);
	ft_print_int_tab(*tab1, tab1_size);
	//ptr = &tab1;
	free(*tab1);
	free(tab1);
	//free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:82:32: error: passing argument 1 of ‘ft_ultimate_range’ from incompatible pointer type [-Werror=incompatible-pointer-types]
   82 |  tab1_size = ft_ultimate_range(&tab1, min, max);
      |                                ^~~~~
      |                                |
      |                                int ***
test_ft_ultimate_range.c:17:29: note: expected ‘int **’ but argument is of type ‘int ***’
   17 | int ft_ultimate_range(int **range, int min, int max);
      |                       ~~~~~~^~~~~
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 16:38:49 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	**tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("tab1 = %p\n", tab1);
	ft_print_int_tab(*tab1, tab1_size);
	//ptr = &tab1;
	free(*tab1);
	free(tab1);
	//free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% lldb test_ft_ultimate_range                                                                 
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 12 at test_ft_ultimate_range.c:71:8, address = 0x00000000000014f6
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 127884 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 127884 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x00005555555554f6 test_ft_ultimate_range`main at test_ft_ultimate_range.c:71:8
   68  		int	min;
   69  		int	max;
   70  		int	**ptr;
-> 71  		int	**tab1 = NULL;
   72  		int	tab1_size;
   73  		int	**tab2 = NULL;
   74  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
Pour min = 3 et max = 8, tab1 =
tab1 = (nil)
e3r11p9% vi ft_ultimate_range.c                                                                 
e3r11p9% cat ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 17:28:09 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		range = (int **) malloc(sizeof(int *));
		if (range == NULL)
			return (-1);
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			*range = &ptr;
			return (range_len);
		}
		else
			return (-1);
	}
	else
		return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c                           
ft_ultimate_range.c: OK!
e3r11p9% vi test_ft_ultimate_range.c
e3r11p9% cat test_ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 17:31:11 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	**tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("tab1 = %p\n", tab1);
	ft_print_int_tab(*tab1, tab1_size);
	//ptr = &tab1;
	free(*tab1);
	free(tab1);
	//free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader test_ft_ultimate_range.c
test_ft_ultimate_range.c: Error!
Error: LINE_TOO_LONG        (line:  61, col: 145):	line too long
Error: LINE_TOO_LONG        (line:  63, col: 101):	line too long
Error: DECL_ASSIGN_LINE     (line:  71, col:  16):	Declaration and assignation on a single line
Error: TOO_MANY_VARS_FUNC   (line:  73, col:   1):	Too many variables declarations in a function
Error: DECL_ASSIGN_LINE     (line:  73, col:  16):	Declaration and assignation on a single line
Error: TOO_MANY_VARS_FUNC   (line:  74, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_VARS_FUNC   (line:  75, col:   1):	Too many variables declarations in a function
Error: DECL_ASSIGN_LINE     (line:  75, col:  16):	Declaration and assignation on a single line
Error: TOO_MANY_VARS_FUNC   (line:  76, col:   1):	Too many variables declarations in a function
Error: TOO_MANY_VARS_FUNC   (line:  77, col:   1):	Too many variables declarations in a function
Error: DECL_ASSIGN_LINE     (line:  77, col:  16):	Declaration and assignation on a single line
Error: TOO_MANY_VARS_FUNC   (line:  78, col:   1):	Too many variables declarations in a function
Error: WRONG_SCOPE_COMMENT  (line:  86, col:   5):	Comment is invalid in this scope
Error: WRONG_SCOPE_COMMENT  (line:  89, col:   5):	Comment is invalid in this scope
Error: WRONG_SCOPE_COMMENT  (line:  90, col:   5):	Comment is invalid in this scope
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
ft_ultimate_range.c: In function ‘ft_ultimate_range’:
ft_ultimate_range.c:56:11: error: assignment to ‘int *’ from incompatible pointer type ‘int **’ [-Werror=incompatible-pointer-types]
   56 |    *range = &ptr;
      |           ^
cc1: all warnings being treated as errors
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:82:32: error: passing argument 1 of ‘ft_ultimate_range’ from incompatible pointer type [-Werror=incompatible-pointer-types]
   82 |  tab1_size = ft_ultimate_range(&tab1, min, max);
      |                                ^~~~~
      |                                |
      |                                int ***
test_ft_ultimate_range.c:17:29: note: expected ‘int **’ but argument is of type ‘int ***’
   17 | int ft_ultimate_range(int **range, int min, int max);
      |                       ~~~~~~^~~~~
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                     
e3r11p9% cat test_ft_ultimate_range.c                                     
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 17:33:45 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	**tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("tab1 = %p\n", tab1);
	ft_print_int_tab(*tab1, tab1_size);
	//ptr = &tab1;
	free(*tab1);
	free(tab1);
	//free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
ft_ultimate_range.c: In function ‘ft_ultimate_range’:
ft_ultimate_range.c:56:11: error: assignment to ‘int *’ from incompatible pointer type ‘int **’ [-Werror=incompatible-pointer-types]
   56 |    *range = &ptr;
      |           ^
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% vi ft_ultimate_range.c                                     
e3r11p9% cat ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 17:42:09 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		range = (int **) malloc(sizeof(int *));
		if (range == NULL)
			return (-1);
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			*range = ptr;
			return (range_len);
		}
		else
			return (-1);
	}
	else
		return (0);
}
e3r11p9% norminette -R CheckForbiddenSourceHeader ft_ultimate_range.c                            
ft_ultimate_range.c: OK!
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% lldb test_ft_ultimate_range                                                                  
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 12 at test_ft_ultimate_range.c:71:8, address = 0x00000000000014e2
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 137071 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 137071 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x00005555555554e2 test_ft_ultimate_range`main at test_ft_ultimate_range.c:71:8
   68  		int	min;
   69  		int	max;
   70  		int	**ptr;
-> 71  		int	**tab1 = NULL;
   72  		int	tab1_size;
   73  		int	**tab2 = NULL;
   74  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
e3r11p9% ./test_ft_ultimate_range 
Pour min = 3 et max = 8, tab1 =
tab1 = (nil)
zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                
e3r11p9% cat test_ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 18:01:12 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ft_print_int_tab(tab1, tab1_size);
	ptr = &tab1;
	//free(*tab1);
	free(tab1);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7fff3d050550
The returned size of range is 5.
free(): invalid size
zsh: IOT instruction (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% lldb test_ft_ultimate_range                                                                
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 27 at test_ft_ultimate_range.c:71:7, address = 0x00000000000014f1
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 139911 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 139911 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x00005555555554f1 test_ft_ultimate_range`main at test_ft_ultimate_range.c:71:7
   68  		int	min;
   69  		int	max;
   70  		int	**ptr;
-> 71  		int	*tab1 = NULL;
   72  		int	tab1_size;
   73  		int	**tab2 = NULL;
   74  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7fffffffe3e0
The returned size of range is 5.
e3r11p9% vi test_ft_ultimate_range.c
e3r11p9% cat test_ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 18:11:09 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ft_print_int_tab(tab1, tab1_size);
	ptr = &tab1;
	//free(*tab1);
	free(tab1);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                 
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffe97297c70
The returned size of range is 5.
tab = (nil)
free(): invalid size
zsh: IOT instruction (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c
e3r11p9% cat test_ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 18:41:14 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	ft_print_int_tab(*ptr, tab1_size);
	//free(*tab1);
	free(**ptr);
	free(*ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
test_ft_ultimate_range.c: In function ‘main’:
test_ft_ultimate_range.c:89:7: error: passing argument 1 of ‘free’ makes pointer from integer without a cast [-Werror=int-conversion]
   89 |  free(**ptr);
      |       ^~~~~
      |       |
      |       int
In file included from test_ft_ultimate_range.c:15:
/usr/include/stdlib.h:555:25: note: expected ‘void *’ but argument is of type ‘int’
  555 | extern void free (void *__ptr) __THROW;
      |                   ~~~~~~^~~~~
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 18:41:59 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	ft_print_int_tab(*ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range.c                                                               
zsh: permission denied: ./test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range  
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffffdd0ce60
The returned size of range is 5.
tab = (nil)
free(): invalid size
zsh: IOT instruction (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 18:43:59 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int *tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(*ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffd4179bf90
ptr = 0x7ffd4179bf90
The returned size of range is 5.
tab = (nil)
free(): invalid size
zsh: IOT instruction (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 19:12:38 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("*tab = %p\n", *tab);
	if (tab != NULL && *tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(*tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffdc42cdbf0
ptr = 0x7ffdc42cdbf0
The returned size of range is 5.
*tab = (nil)
free(): invalid size
zsh: IOT instruction (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 19:14:35 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(*tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffcd384f610
ptr = 0x7ffcd384f610
The returned size of range is 5.
tab = 0x7ffcd384f610
[zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 19:48:02 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr(*(tab[i]));
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffc62bc5520
ptr = 0x7ffc62bc5520
The returned size of range is 5.
tab = 0x7ffc62bc5520
[zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% lldb test_ft_ultimate_range 
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 27 at test_ft_ultimate_range.c:72:7, address = 0x000000000000150c
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 154928 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 154928 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x000055555555550c test_ft_ultimate_range`main at test_ft_ultimate_range.c:72:7
   69  		int	min;
   70  		int	max;
   71  		int	**ptr;
-> 72  		int	*tab1 = NULL;
   73  		int	tab1_size;
   74  		int	**tab2 = NULL;
   75  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7fffffffe3e0
ptr = 0x7fffffffe3e0
The returned size of range is 5.
tab = 0x7fffffffe3e0
[%                                                                                                                                                        e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 19:54:48 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			ft_putnbr((*tab)[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% ./test_ft_ultimate_range   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffe4292e700
ptr = 0x7ffe4292e700
The returned size of range is 5.
tab = 0x7ffe4292e700
[zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c 
e3r11p9% cat test_ft_ultimate_range.c
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 19:56:09 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			printf("%d", (*tab)[i]);
			ft_putnbr((*tab)[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffc15c25fb0
ptr = 0x7ffc15c25fb0
The returned size of range is 5.
tab = 0x7ffc15c25fb0
[zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 19:57:59 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			printf("%d", *tab[i]);
			//ft_putnbr(*tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffec1415d10
ptr = 0x7ffec1415d10
The returned size of range is 5.
tab = 0x7ffec1415d10
[zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 19:58:31 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			printf("%d", (*tab)[i]);
			//ft_putnbr(*tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffead87f110
ptr = 0x7ffead87f110
The returned size of range is 5.
tab = 0x7ffead87f110
[zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 19:59:59 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			printf("%d", *(tab[i]));
			//ft_putnbr(*tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffc654a4cf0
ptr = 0x7ffc654a4cf0
The returned size of range is 5.
tab = 0x7ffc654a4cf0
[zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% lldb test_ft_ultimate_range                                                            
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 27 at test_ft_ultimate_range.c:73:7, address = 0x0000000000001518
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 156960 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 156960 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x0000555555555518 test_ft_ultimate_range`main at test_ft_ultimate_range.c:73:7
   70  		int	min;
   71  		int	max;
   72  		int	**ptr;
-> 73  		int	*tab1 = NULL;
   74  		int	tab1_size;
   75  		int	**tab2 = NULL;
   76  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7fffffffe3e0
ptr = 0x7fffffffe3e0
The returned size of range is 5.
tab = 0x7fffffffe3e0
[%                                                                                                                                                        e3r11p9% vi ft_ultimate_range.c                                                                 
e3r11p9% cat ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 20:04:46 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>
#include <stdio.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;
	int	val;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
			{
				ptr[i++] = value++;
				val = ptr[i - 1];
				printf("%d ", val);
			}
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		range = (int **) malloc(sizeof(int *));
		if (range == NULL)
			return (-1);
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			*range = ptr;
			return (range_len);
		}
		else
			return (-1);
	}
	else
		return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                 
3 4 5 6 7 Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffff608df70
ptr = 0x7ffff608df70
The returned size of range is 5.
tab = 0x7ffff608df70
[zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi ft_ultimate_range.c                                                                      
e3r11p9% cat ft_ultimate_range.c 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_ultimate_range.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/23 10:23:31 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 20:06:43 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int	*ft_range(int min, int max)
{
	int	range_len;
	int	*ptr;
	int	i;
	int	value;

	if (min < max)
	{
		range_len = max - min;
		ptr = (int *) malloc(range_len * sizeof(int));
		if (ptr)
		{
			value = min;
			i = 0;
			while (i < range_len && value < max)
				ptr[i++] = value++;
			if (i == range_len)
				return (ptr);
			else
				return (NULL);
		}
	}
	return (NULL);
}

int	ft_ultimate_range(int **range, int min, int max)
{
	int	range_len;
	int	*ptr;

	range = NULL;
	if (min < max)
	{
		range = (int **) malloc(sizeof(int *));
		if (range == NULL)
			return (-1);
		range_len = max - min;
		ptr = ft_range(min, max);
		if (ptr)
		{
			*range = ptr;
			return (range_len);
		}
		else
			return (-1);
	}
	else
		return (0);
}
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 20:08:27 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;
	int	val;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		while (i < size)
		{
			val = *(*(tab) + i);
			printf("%d", *(*(tab) + i));
			//ft_putnbr(*tab[i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                               
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffd56dc0ea0
ptr = 0x7ffd56dc0ea0
The returned size of range is 5.
tab = 0x7ffd56dc0ea0
[zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% lldb test_ft_ultimate_range                                                                 
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 27 at test_ft_ultimate_range.c:75:7, address = 0x000000000000152c
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 158475 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 158475 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x000055555555552c test_ft_ultimate_range`main at test_ft_ultimate_range.c:75:7
   72  		int	min;
   73  		int	max;
   74  		int	**ptr;
-> 75  		int	*tab1 = NULL;
   76  		int	tab1_size;
   77  		int	**tab2 = NULL;
   78  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7fffffffe3e0
ptr = 0x7fffffffe3e0
The returned size of range is 5.
tab = 0x7fffffffe3e0
[%                                                                                                                                                        e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 20:13:11 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;
	int	val;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		val = 0;
		while (i < size)
		{
			val = tab[0][i];
			printf("%d", tab[0][i]);
			//ft_putnbr(tab[0][i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                 
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffeee343f10
ptr = 0x7ffeee343f10
The returned size of range is 5.
tab = 0x7ffeee343f10
[zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% ls -al                                                                                      
total 40
drwxr-xr-x 2 hauerbac 2023_paris  4096 Feb 23 20:13 .
drwxr-xr-x 5 hauerbac 2023_paris  4096 Feb 22 19:16 ..
-rw-r--r-- 1 hauerbac 2023_paris  1930 Feb 23 09:57 ft_ultimate_range_0.c
-rw-r--r-- 1 hauerbac 2023_paris  1643 Feb 23 20:06 ft_ultimate_range.c
-rwxr-xr-x 1 hauerbac 2023_paris 18928 Feb 23 20:13 test_ft_ultimate_range
-rw-r--r-- 1 hauerbac 2023_paris  3095 Feb 23 20:13 test_ft_ultimate_range.c
e3r11p9% lldb test_ft_ultimate_range                                                                 
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 27 at test_ft_ultimate_range.c:76:7, address = 0x0000000000001533
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 159326 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 159326 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x0000555555555533 test_ft_ultimate_range`main at test_ft_ultimate_range.c:76:7
   73  		int	min;
   74  		int	max;
   75  		int	**ptr;
-> 76  		int	*tab1 = NULL;
   77  		int	tab1_size;
   78  		int	**tab2 = NULL;
   79  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7fffffffe3e0
ptr = 0x7fffffffe3e0
The returned size of range is 5.
tab = 0x7fffffffe3e0
[%                                                                                                                                                        e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 20:16:21 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;
	int	val;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	if (tab != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		val = 0;
		while (i < size)
		{
			val = tab[i][0];
			printf("%d", tab[i][0]);
			//ft_putnbr(tab[0][i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% lldb test_ft_ultimate_range                                                                 
(lldb) target create "test_ft_ultimate_range"
Current executable set to '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64).
(lldb) b main
Breakpoint 1: where = test_ft_ultimate_range`main + 27 at test_ft_ultimate_range.c:76:7, address = 0x000000000000153b
(lldb) run
warning: (x86_64) /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
Process 159818 launched: '/mnt/nfs/homes/hauerbac/c_07/ex02/test_ft_ultimate_range' (x86_64)
warning: (x86_64) /lib64/ld-linux-x86-64.so.2 unsupported DW_FORM value: 0x1f
warning: (x86_64) /lib/x86_64-linux-gnu/libc.so.6 unsupported DW_FORM value: 0x1f
Process 159818 stopped
* thread #1, name = 'test_ft_ultimat', stop reason = breakpoint 1.1
    frame #0: 0x000055555555553b test_ft_ultimate_range`main at test_ft_ultimate_range.c:76:7
   73  		int	min;
   74  		int	max;
   75  		int	**ptr;
-> 76  		int	*tab1 = NULL;
   77  		int	tab1_size;
   78  		int	**tab2 = NULL;
   79  		int	tab2_size;
(lldb) gui
(lldb) q
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7fffffffe3e0
ptr = 0x7fffffffe3e0
The returned size of range is 5.
tab = 0x7fffffffe3e0
[%                                                                                                                                                        e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 20:22:39 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;
	int	val;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	printf("tab[0] = %p\n", tab[0]);
	printf("tab[0][0] = %p\n", tab[0][0]);
	if (tab != NULL && tab[0] != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		val = 0;
		while (i < size)
		{
			val = tab[0][0];
			printf("%d", tab[0][0]);
			//ft_putnbr(tab[0][i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
test_ft_ultimate_range.c: In function ‘ft_print_int_tab’:
test_ft_ultimate_range.c:50:23: error: format ‘%p’ expects argument of type ‘void *’, but argument 2 has type ‘int’ [-Werror=format=]
   50 |  printf("tab[0][0] = %p\n", tab[0][0]);
      |                      ~^     ~~~~~~~~~
      |                       |           |
      |                       void *      int
      |                      %d
cc1: all warnings being treated as errors
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 20:22:58 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;
	int	val;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	printf("tab[0] = %p\n", tab[0]);
	printf("tab[0][0] = %d\n", tab[0][0]);
	if (tab != NULL && tab[0] != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		val = 0;
		while (i < size)
		{
			val = tab[0][0];
			printf("%d", tab[0][0]);
			//ft_putnbr(tab[0][i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                     
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7ffe2f046e40
ptr = 0x7ffe2f046e40
The returned size of range is 5.
tab = 0x7ffe2f046e40
tab[0] = (nil)
zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 20:29:11 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;
	int	val;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	printf("tab[0] = %p\n", tab[0]);
	printf("tab[0][0] = %d\n", tab[0][0]);
	if (tab != NULL && tab[0] != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		val = 0;
		while (i < size)
		{
			val = tab[0][0];
			printf("%d", tab[0][0]);
			//ft_putnbr(tab[0][i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	printf("tab1[0] = %d\n", tab1[0]);
	ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);
	//free(*tab1);
	free(*ptr);
	free(ptr);
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7fff507a9480
zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range
e3r11p9% vi test_ft_ultimate_range.c                                                                 
e3r11p9% cat test_ft_ultimate_range.c                                                                 
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_ultimate_range.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hauerbac <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/22 17:56:00 by hauerbac          #+#    #+#             */
/*   Updated: 2023/02/23 20:30:15 by hauerbac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int	ft_ultimate_range(int **range, int min, int max);

void	ft_putnbr(int nb)
{
	long	nb_in_long;
	int		digit_to_char;

	nb_in_long = nb;
	if (nb_in_long < 0)
	{
		write(1, "-", 1);
		nb_in_long = nb_in_long * -1;
	}
	if (nb_in_long < 10)
	{
		digit_to_char = nb_in_long + '0';
		write(1, &digit_to_char, 1);
	}
	else
	{
		ft_putnbr(nb_in_long / 10);
		ft_putnbr(nb_in_long % 10);
	}
}

void	ft_print_int_tab(int **tab, int size)
{
	int	i;
	int	val;

	printf("The returned size of range is %d.\n", size);
	printf("tab = %p\n", tab);
	printf("tab[0] = %p\n", tab[0]);
	printf("tab[0][0] = %d\n", tab[0][0]);
	if (tab != NULL && tab[0] != NULL && size > 0)
	{
		write(1, "[", 1);
		i = 0;
		val = 0;
		while (i < size)
		{
			val = tab[0][0];
			printf("%d", tab[0][0]);
			//ft_putnbr(tab[0][i]);
			if (i < size - 1)
				write(1, ", ", 2);
			i++;
		}
		write(1, "]", 1);
	}
	else if (size == 0)
		printf("\nNone array - Reason : If the value of min is greater or equal to max’s value, range will point on NULL and it should return 0.");
	else if (size == -1)
		printf("\nIncomplete array - Reason : The size of range should be returned (or -1 on error).");
}

int	main(void)
{
	int	min;
	int	max;
	int	**ptr;
	int	*tab1 = NULL;
	int	tab1_size;
	int	**tab2 = NULL;
	int	tab2_size;
	int	**tab3 = NULL;
	int	tab3_size;
	int	**tab4 = NULL;
	int	tab4_size;

	min = 3;
	max = 8;
	tab1_size = ft_ultimate_range(&tab1, min, max);
	printf("Pour min = %d et max = %d, tab1 =\n", min, max);
	printf("&tab1 = %p\n", &tab1);
	printf("tab1[0] = %d\n", tab1[0]);
	/*ptr = &tab1;
	printf("ptr = %p\n", ptr);
	ft_print_int_tab(ptr, tab1_size);*/
	//free(*tab1);
	/*free(*ptr);
	free(ptr);*/
	/*min = 42;
	max = 42;
	tab2_size = ft_ultimate_range(tab2, min, max);
	printf("\nPour min = %d et max = %d, tab2 =\n", min, max);
	ft_print_int_tab(*tab2, tab2_size);
	free(*tab2);
	free(tab2);
	min = -42;
	max = 43;
	tab3_size = ft_ultimate_range(tab3, min, max);
	printf("\nPour min = %d et max = %d, tab3 =\n", min, max);
	ft_print_int_tab(*tab3, tab3_size);
	free(*tab3);
	free(tab3);
	min = 42;
	max = -1;
	tab4_size = ft_ultimate_range(tab4, min, max);
	printf("\nPour min = %d et max = %d, tab4 =\n", min, max);
	ft_print_int_tab(*tab4, tab4_size);
	free(*tab4);
	free(tab4);*/
	return (0);
}
e3r11p9% gcc -Wextra -Werror -o test_ft_ultimate_range -g ft_ultimate_range.c test_ft_ultimate_range.c
e3r11p9% ./test_ft_ultimate_range                                                                   
Pour min = 3 et max = 8, tab1 =
&tab1 = 0x7fff45fd53c8
zsh: segmentation fault (core dumped)  ./test_ft_ultimate_range

